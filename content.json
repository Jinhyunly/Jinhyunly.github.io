[{"title":"HTML_Introduction","date":"2018-03-10T19:46:58.000Z","path":"2018/03/11/HTML-Introduction/","text":"HTML HTML은 웹페이지를 기술하기 위한 마크업 언어이다.조금 더 자세히 말하면 웹페이지의 내용(content)과 구조(structure)을 담당하는 언어로써HTML 태그를 통해 정보를 구조화 하는 것이다. 시멘틱 태그(Semeantics) HTML 요소의 의미를 명확히 설명하는 시맨틱 태그를 도입하여 브라우저, 검색엔진, 개발자모두에게 콘텐츠의 의미를 명확히 설명할수 있다. 이를 통해 HTML 요소의 의미를 명확히 해석하고그 데이터를 활용할 수 있는 시멘틱 웹을 실현할 수 있다. head head태그 사이에는 document title, 외부파일 참조, metadata의 설정 등이위치하며 이 정보들은 브라우저에 표시되지 않는다. body 웹브라우저에 출력되는 모든 요소는 body태그 사이에 위치한다. tip) HTML document는 .html 확장자를 갖는 순수한 텍스트 파일이다. 따라서메모장 등으로도 편집할수 있으나 다양한 편의 기능을 제공하는 editor 또는IDE(Integrated Development Environment)를 사용하는 것이 일반적이다.대표적인 editor 또는 IDE는 vsCode(Visual Studio Code), WebStorm, Atom, Sublime text등이 있다. HTML 요소(Element) 시작태그와 종료태그 그리고 태그 사이에 위치한 content로 구성된다1&lt;p&gt; Hello &lt;/p&gt; 태그는 대소문자를 구별하지 않으나 w3c 에서 소문자를 추천하고 있으므로 소문자로 한다 요소의 중첩 태그안의 태그1234&lt;body&gt; &lt;h1&gt;안녕&lt;/h1&gt; &lt;p&gt;반갑&lt;/p&gt;&lt;/body&gt; body요소는 h1, p요소를 포함한다. 이 중첩 관계(부자관계)로 웹페이지의 구조를 표현한다. 빈 요소(Empty Element) content를 가질수 없는 요소를 빈 요소라 한다. content가 없으며 attribute만을 가질수 있다.빈요소중 대표적인 요소는 br, hr, img, input, link, meta 등이 있다. 어트리뷰트(attribute) 어트리뷰트란 요소의 성질, 특징을 정의하는 명세이다. 어트리뷰트를 가질수 있으며 어트리뷰트는요소에 추가적 정보(예를 들어 이미지 파일의 경로, 크기 등)를 제공한다. 어트리뷰트는 시작태그에위치해야 하며 이름과 값의 쌍을 이룬다. (e.g name=”value”)1&lt;img src=&quot;html.png&quot;&gt; src가 Attribute Name이 되고 “”값이 Attribute Value 가 된다 글로벌 어트리뷰트(HTML Global Attribute) 글로벌 어트리뷰트는 모든 HTML 요소가 공통으로 사용할 수 있는 어트리 뷰트다.몇몇 요소에는 효과가 적용 되지 않을 수 있지만, 글로벌 어트리뷰트는 대체로모든 요소에 사용될 수 있다.대표적인 글로벌 어트리뷰트는 id :유일한 식별자(id)를 요소에 지정한다. 중복 지정이 불가하다. class :스타일시트에 정의된 class를 요소에 지정한다. 중복 지정이 가능하다. hidden :css의 hidden과는 다르게 의미상으로도 브라우저에 노출되지 않게 된다. lang :지정된 요소의 언어를 지정한다. 검색엔진의 크롤링 시 웹페이지의 언어를 인식할 수 있게 한다. style :요소에 인라인 스타일을 지정한다. tabindex :사용자가 키보드로 페이지를 내비게이션 시 이동 순서를 지정한다. title : 요소에 관한 제목을 지정한다. 주석(Comments) 주석은 주로 개발자에게 코드를 설명하기 위해 사용되며 브라우저는 주석을 화면에 표시하지 않는다.","tags":[{"name":"web","slug":"web","permalink":"https://jinhyunly.github.io/tags/web/"},{"name":"HTML","slug":"HTML","permalink":"https://jinhyunly.github.io/tags/HTML/"}]},{"title":"git_tutorial","date":"2018-02-20T19:14:22.000Z","path":"2018/02/21/git-tutorial/","text":"git 초간단 설명서 git init새로운 저장소 만들기git add .변경된 파일 전체 추가git status -&gt; new file들이 생성된것을 볼수있다git commit -m “설명”변경 내용 확정git remote add origin “주소”원격 서버에 연결하기git push -u origin master원격 서버로 올리기","tags":[{"name":"git","slug":"git","permalink":"https://jinhyunly.github.io/tags/git/"}]},{"title":"nodeJs_restAPI","date":"2018-02-16T16:03:20.000Z","path":"2018/02/17/nodeJs-restAPI/","text":"1. 의존 모듈 추가 body-parser -&gt; post 데이터 처리express-session -&gt; 세션관리express-session 모듈이 직접 쿠키에 접근하므로 cookie-parser를 더이상 사용할 필요가 없다.추가적으로 node.js 에 내장되어있는 fs모듈이 있는데 이는 나중에 파일을 열기 위함이다.router 코드를 아래로 내려주는데 bodyParser 설정 아래 부분에 있다면 제대로 작동하지 않는다.그리고 router에서 fs모듈을 사용할 수있도록 인자로 추가해준다. 2. session 부분 secret : 쿠키를 임의로 변조하는 것을 방지하기 위한 sign 값이다. 원하는 값을 넣으면된다 resave : 세션을 언제나 저장할지(변경하지 않아도) 저장하는 값입니다. express-session documentation에서는 이값을 false 로 하는 것을 권장하고 필요에 따라 true로 설정 saveUninitialized : uninitialized 세션이란 새로 생겼지만 변경되지 않은 세션을 의미한다. Documentation 에서 이값을 true로 설정하는 것을 권장한다. 3. ejs 에서는 두가지만 알면된다 &lt;% 자바스크립트 코드%&gt; &lt;%= 출력할 자바스크립트 객체%&gt; -&gt; 자바스크립트 객체를 router에서 받아올수있다. 4. ejs 분할하기 php나 rails에서 처럼, ejs에서도 코드를 여러파일로 분리하고 불러와서 사용할수있다.&lt;% include FILENAME %&gt; 5. RESTful API REST는 Representational State Transfer 의 약자로서, 월드와이드 웹(www)와 같은하이퍼미디어 시스템을 위한 소프트웨어 아키텍쳐 중 하나의 형식이다. REST서버는 클라이언트로 하여금 HTTP 프로토콜을사용해 서버의 정보에 접근 및 변경을 가능케 합니다. 여기서 정보는 text, xml, json등 형식을 제공되는데 트렌드는 json이다 REST 기반 아키텍쳐에서 자주 사용되는 4가지 메소드는 다음과 같다 GET - 조회 PUT - 생성 및 업데이트 DELETE - 제거 POST - 생성POST와 PUT이 헷갈린다면 아래 링크 참조https://1ambda.github.io/javascripts/rest-api-put-vs-post/API:GET/list모든 유저 리스트를 출력하는 GET API를 작성한다.우선, user.json 파일을 읽어야 하므로 , fs 모듈을 사용한다.API:GET/getUser/:username특정 유저 username의 디테일한 정보를 가져오는 GET API를 작성한다.API:POST/addUser/:usernamePOST 메소드를 사용한다.API:PUT/updateUser/:usernamebody:{“password”:”“, “name”: ““}사용자 정보를 업데이트하는 API 이고, PUT 메소드를 사용PUT API 는 indempotent해야 한다, 쉽게 말해서 요청을 몇번 수행하더라도, 같은 결과를 보장해야한다.API:DELETE/deleteUser/:username유저를 데이터에서 삭제하는 API이다. DELETE 메소드 사용 6. restAPI source123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160module.exports = function(app, fs)&#123; app.get(&apos;/&apos;,function(req,res)&#123; var sess = req.session; res.render(&apos;index&apos;, &#123; title: &quot;MY HOMEPAGE&quot;, length: 5, name: sess.name, username: sess.username &#125;) &#125;) app.get(&apos;/list&apos;,function(req,res)&#123; fs.readFile(__dirname + &quot;/../data/&quot;+&quot;user.json&quot;,&apos;utf8&apos;,function(err,data)&#123; console.log(data); res.end(data); &#125;) &#125;) app.get(&apos;/getUser/:username&apos;, function(req,res)&#123; fs.readFile(__dirname + &quot;/../data/user.json&quot;,&apos;utf8&apos;, function(err, data)&#123; var users = JSON.parse(data) res.json(users[req.params.username]) &#125;) &#125;) app.post(&apos;/addUser/:username&apos;, function(req,res)&#123; var result = &#123; &#125;; var username = req.params.username; //CHECK REQ VALIDITY if(!req.body[&quot;password&quot;] || !req.body[&quot;name&quot;])&#123; result[&quot;success&quot;] = 0; result[&quot;error&quot;] = &quot;invalid request&quot;; res.json(result); return; &#125; //LOAD DATA &amp; CHECK DUPLICATION fs.readFile(__dirname+&quot;/../data/user.json&quot;,&apos;utf8&apos;, function(err, data)&#123; var users = JSON.parse(data); if(users[username])&#123; //DUPLICATION FOUND result[&quot;success&quot;] = 0; result[&quot;error&quot;] = &quot;duplicate&quot;; res.json(result); return; &#125; //ADD TO data users[username] = req.body; //SAVE data fs.writeFile(__dirname + &quot;/../data/user.json&quot;, JSON.stringify(users,null,&apos;\\t&apos;),&quot;utf8&quot;, function(err, data)&#123; result=&#123;&quot;success&quot;:1&#125;; res.json(result); &#125;) &#125;) &#125;) app.put(&apos;/updateUser/:username&apos;, function(req,res)&#123; var result = &#123; &#125;; var username = req.params.username; //CHECK REQ VALIDITY if(!req.body[&quot;password&quot;] || !req.body[&quot;name&quot;])&#123; result[&quot;success&quot;] = 0; result[&quot;error&quot;] = &quot;invalid request&quot;; res.json(result); return; &#125; //LOAD data fs.readFile(__dirname + &quot;/../data/user.json&quot;,&quot;utf8&quot;, function(err,data)&#123; var users = JSON.parse(data); //ADD/MODIFY data users[username] = req.body; //SAVE DATA fs.writeFile(__dirname + &quot;/../data/user.json&quot;, JSON.stringify(users,null,&apos;\\t&apos;), &quot;utf8&quot;, function(err,data)&#123; result = &#123;&quot;success&quot;: 1&#125;; res.json(result); &#125;) &#125;) &#125;) app.delete(&apos;/deleteUser/:username&apos;, function(req,res)&#123; var result = &#123; &#125;; //LOAD DATA fs.readFile(__dirname + &quot;/../data/user.json&quot;, &quot;utf8&quot;, function(err,data)&#123; var users = JSON.parse(data); //IF NOT FOUND if(!users[req.params.username])&#123; result[&quot;success&quot;] = 0; result[&quot;error&quot;] = &quot;not found&quot;; res.json(result); return; &#125; delete users[req.params.username]; fs.writeFile(__dirname + &quot;/../data/user.json&quot;, JSON.stringify(users,null,&apos;\\t&apos;), &quot;utf8&quot;, function(err,data)&#123; result[&quot;success&quot;] = 1; res.json(result); return; &#125;) &#125;) &#125;) app.get(&apos;/login/:username/:password&apos;, function(req,res)&#123; var sess; sess = req.session; fs.readFile(__dirname + &quot;/../data/user.json&quot;,&quot;utf8&quot;, function(err, data)&#123; var users = JSON.parse(data); var username = req.params.username; var password = req.params.password; var result = &#123;&#125;; if(!users[username])&#123; //USERNAME NOT FOUND result[&quot;success&quot;] = 0; result[&quot;error&quot;] = &quot;not found&quot;; res.json(result); return; &#125; if(users[username][&quot;password&quot;] == password)&#123; result[&quot;success&quot;] = 1; sess.username = username; sess.name = users[username][&quot;name&quot;]; res.json(result); &#125;else&#123; result[&quot;success&quot;] = 0; result[&quot;error&quot;] = &quot;incorrect&quot;; res.json(result); &#125; &#125;) &#125;) app.get(&apos;/logout&apos;, function(req,res)&#123; sess = req.session; if(sess.username)&#123; req.session.destroy(function(err)&#123; if(err)&#123; console.log(err); &#125;else&#123; res.redirect(&apos;/&apos;); &#125; &#125;) &#125;else&#123; res.redirect(&apos;/&apos;) &#125; &#125;)&#125; 7. 해당소스 및 참고사이트 https://github.com/Jinhyunly/nodeJs_restAPI.git (작성한 소스)https://velopert.com/332 (참고사이트)","tags":[{"name":"nodeJs","slug":"nodeJs","permalink":"https://jinhyunly.github.io/tags/nodeJs/"},{"name":"restAPI","slug":"restAPI","permalink":"https://jinhyunly.github.io/tags/restAPI/"}]},{"title":"firebase","date":"2018-02-12T02:49:51.000Z","path":"2018/02/12/firebase/","text":"SPA(Single Page Application)란? 단일 페이지 웹 어플리케이션이며 첫 페이지 로딩 후 갱신 없이 모든 서비스가 한화면에서 이루어지는 웹 사이트를 일컫는다. Firebase 설치 https://nodejs.org/ko/ firebase 설치를 위한 nodejs 설치 Firebase 설치 환경설정 1.콘솔창을 키고 npm install firebase-tool -g 입력2.memoWeb이라는 디렉토리를 만들고 디렉토리 경로까지 콘솔창으로 이동3.firebase init4.Are you ready to proceed? (Y/n) -&gt; y라고 입력5.Which Firebase CLI features do you want to setup for this folder?Press Space to select features, then Enter to confirm your choices.6.()Hosting: Configure and deploy Firebase Hosting sites 로 커서이동후 스페이스로 선택후 엔터7.What do you want to use as your public directory? public8.Configure as a single-page app (rewrite all urls to /index.html)? (y/N) -&gt; y 입력9.현재 디렉토리 경로에서 firebase serve 라고 입력하면 서버가 구동10.웹 브라우저에서 http://localhost:5000 이라고 입력하면 hosting 화면이 나온다.","tags":[{"name":"web","slug":"web","permalink":"https://jinhyunly.github.io/tags/web/"},{"name":"mobile","slug":"mobile","permalink":"https://jinhyunly.github.io/tags/mobile/"},{"name":"firebase","slug":"firebase","permalink":"https://jinhyunly.github.io/tags/firebase/"}]},{"title":"nodeJs_basicSetting","date":"2018-02-10T04:36:13.000Z","path":"2018/02/10/nodeJs-basicSetting/","text":"NodeJs란 Javascript 엔진으로 빌드된 Javascript 런타임이다. npm이란 Node Package Modules의 약자이다Node.js에서 사용가능한 모듈들을 패키지화시켜 모아놓은 것이다npm&lt;명령어&gt;npm help : 메인 설명npm &lt;명령어&gt; -h : 명령어에 대한 설명npm list 또는 npm ls : npm에서 관리되는 모듈 리스트npm view &lt;패키지명&gt; : 모듈의 버전별 상세정보npm install &lt;패키지명&gt; : 모듈을 찾아서 설치npm list installed : 설치되어 있는 모듈의 목록을 봄npm update &lt;패키지명&gt; : 설치된 패키지를 최신버전으로 업데이트 express란 Nodejs 확장 모듈로서 서버사이드 웹프레임워크이다.view engine으로는 총 5가지를 지원한다.-Haml-Jade-EJS-CoffeKup-jQuery Templates node 설치와 기본적으로 필요한 모듈을 다운받자 packge.json123456789101112131415161718192021222324&#123; &quot;name&quot;: &quot;nodeserver&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;nodeserver test&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; &#125;, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;dependencies&quot;: &#123; &quot;body-parser&quot;: &quot;^1.18.2&quot;, &quot;ejs&quot;: &quot;^2.5.7&quot;, &quot;express&quot;: &quot;^4.16.2&quot;, &quot;mysql&quot;: &quot;^2.15.0&quot;, &quot;nodemon&quot;: &quot;^1.14.3&quot; &#125;, &quot;devDependencies&quot;: &#123; &quot;connect-flash&quot;: &quot;^0.1.1&quot;, &quot;express-session&quot;: &quot;^1.15.6&quot;, &quot;passport&quot;: &quot;^0.4.0&quot;, &quot;passport-local&quot;: &quot;^1.0.0&quot; &#125;&#125; 기본적인 app.js -&gt; 서버구동 app.js123456789101112131415161718192021222324252627282930var express = require(&apos;express&apos;)var bodyParser = require(&apos;body-parser&apos;)var app = express()var router = require(&apos;./router/index&apos;)var passport = require(&apos;passport&apos;)var LocalStrategy = require(&apos;passport-local&apos;).Strategyvar session = require(&apos;express-session&apos;)var flash = require(&apos;connect-flash&apos;) //메세지를 쉽게 전달함app.listen(3000, function()&#123; //비동기로 동작 console.log(&quot;start! express server on port 3000!&quot;);&#125;);//미들웨어 정의app.use(express.static(&apos;public&apos;)) //express static함수에 public이라는 디렉토리를 등록app.use(bodyParser.json()) // request body 에 오는 데이터를 json형식으로 변환app.use(bodyParser.urlencoded(&#123;extended:true&#125;))// extended: true -&gt; url인코딩이 계속적용될지 1번만 적용할지 묻는것app.set(&apos;view engine&apos;, &apos;ejs&apos;)app.use(session(&#123; secret: &apos;keyboard cat&apos;, resave: false, saveUninitialized: true&#125;))app.use(passport.initialize())app.use(passport.session())app.use(flash())app.use(router)","tags":[{"name":"nodeJs","slug":"nodeJs","permalink":"https://jinhyunly.github.io/tags/nodeJs/"}]},{"title":"mongoDB_install","date":"2018-02-08T13:04:22.000Z","path":"2018/02/08/mongoDB-install/","text":"window에 mongodb설치하기 https://www.mongodb.com/download-center?jmp=homepage#community 접속 Community Server 후 windows 환경에서 download 클릭 image1 next 쭉 눌러준다 기본으로 C:\\ProgramFiles\\MongoDB 로 설치된다 환경변수 path 경로에 새로만들기를 누르고 C:\\ProgramFiles\\MongoDB\\Server\\3.6\\bin 로 잡아준다 C:\\data\\db 파일을 만들어준다 cmd에서접근통제 없이 MongoDB를 시작한다 mongod –port 27017 –dbpath /data/db인스턴스에 연결 mongo –port 27017액세스 제어로 MongoDB 인스턴스를 다시 시작 mongod –auth –port 27017 –dbpath /data/db cmd 창을 2개 키고 첫 cmd 창은 mongod를 입력하고 그대로 서버를 켜준다 나머지 1개의 창에는 mogod를 입력하고 시작한다. (접속)","tags":[{"name":"database","slug":"database","permalink":"https://jinhyunly.github.io/tags/database/"},{"name":"mongoDB","slug":"mongoDB","permalink":"https://jinhyunly.github.io/tags/mongoDB/"}]},{"title":"SpringFramework","date":"2018-02-08T12:29:23.000Z","path":"2018/02/08/springFramework/","text":"Spring framework 프레임워크란, 특정한 목적에 맞게 프로그램이을 쉽게 하기 위한 약속입니다.자바 언어를 기반으로 다양한 어플리케이션을 제작하기 위한 약속된 프로그래밍 틀 이다.스프링의 경우 톰캣을 이용할수 있다. (접근하기 쉽다) eclipse / help / market place 에서 STS 검색후 install DI(Dependency Injection 의존성 주입) 와 IOC 컨테이너(Spring) 스프링이란 부품을 생성하고 조립하는 라이브러리 집합체라고 할 수 있다. AOP(Aspect Oriented Programming)공통기능을 모든 모듈에 적용하기 위한 방법으로 상속을 통한 방법이 있다.상속도 좋은 방법이지만 java에서 다중상속이 불가하므로 AOP방법으로 한다.-공통기능을 분리시켜놓고 공통기능을 필요로 하는 핵심기능들에서 사용하는방식(공통기능을 재활용하는 방식) AOP용어-Aspect: 공통기능 Advice: Aspect의 기능자체-Joinpoint: Advice를 적용해야 되는 부분(ex 필드, 메소드) (스프링에서는 메소드만 해당)-Pointcut: Joinpoint의 부분으로 실제로 Advice가 적용된 부분-Weaving: Advice를 핵심 기능에 적용 하는 행위 스프링에서 AOP 구현 방법: proxy를 이용한다 스프링에서 AOP 구현 방식 : XML스키마 기반으로 구현, @Aspect 어노테이션 기반으로 구현Advice 종류 : 메소드 실행전에 advice 실행 : 정상적으로 메소드 실행 후에 advice 실행 : 메소드실행중 exception 발생시 advice 실행 : 메소드 실행중 exception 이 발생하여도 advice 실행 : 메서드 실행 전/후 및 exception 발생 시 advice 실행 AspectJ Pointcut 표현식 pointcut을 지정할 때 사용하는 표현식으로 AspectJ 문법을 사용 * : 모든. : 현재.. : 0개 이상 스프링 MVC 개요Spring이 웹 프레임워크로서 우수성이 인정되었기 때문에 유명해졌다@Validator를 이용한 검증폼에서 전달되는 데이터를 컴맨드 객체에 담아 컨트롤 객체에 전달한다.이때 커멘드 객체의 유효성을 검사 할 수 있다.참고로 javascript를 이용하는 것은 클라이언트에서 검사하는 방법이고지금 하는 Validator 인터페이스를 이용하는 방법은 서버에서 검사하는 방법이다.","tags":[{"name":"web","slug":"web","permalink":"https://jinhyunly.github.io/tags/web/"},{"name":"spring","slug":"spring","permalink":"https://jinhyunly.github.io/tags/spring/"}]},{"title":"image load","date":"2018-02-08T09:06:38.000Z","path":"2018/02/08/first-post/","text":"MarkDown 형식으로 이미지 올리는법 image how can I image load1![Alt text](/imageFolder_Name/imageFile_Name.jpg &quot;avatar&quot;)","tags":[{"name":"test","slug":"test","permalink":"https://jinhyunly.github.io/tags/test/"}]}]