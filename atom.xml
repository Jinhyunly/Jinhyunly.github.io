<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jinhyunly page</title>
  
  <subtitle>Computer Scientist</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jinhyunly.github.io/"/>
  <updated>2018-02-12T02:54:18.420Z</updated>
  <id>https://jinhyunly.github.io/</id>
  
  <author>
    <name>jinhyun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>firebase</title>
    <link href="https://jinhyunly.github.io/2018/02/12/firebase/"/>
    <id>https://jinhyunly.github.io/2018/02/12/firebase/</id>
    <published>2018-02-12T02:49:51.000Z</published>
    <updated>2018-02-12T02:54:18.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SPA-Single-Page-Application-란"><a href="#SPA-Single-Page-Application-란" class="headerlink" title="SPA(Single Page Application)란?"></a>SPA(Single Page Application)란?</h3><blockquote><p>단일 페이지 웹 어플리케이션이며 첫 페이지 로딩 후 갱신 없이 모든 서비스가 한화면에서 이루어지는 웹 사이트를 일컫는다.</p></blockquote><h3 id="Firebase-설치"><a href="#Firebase-설치" class="headerlink" title="Firebase 설치"></a>Firebase 설치</h3><blockquote><p><a href="https://nodejs.org/ko/" target="_blank" rel="noopener">https://nodejs.org/ko/</a> <br><br>firebase 설치를 위한 nodejs 설치</p></blockquote><h3 id="Firebase-설치-환경설정"><a href="#Firebase-설치-환경설정" class="headerlink" title="Firebase 설치 환경설정"></a>Firebase 설치 환경설정</h3><blockquote><p>1.콘솔창을 키고 npm install firebase-tool -g 입력<br>2.memoWeb이라는 디렉토리를 만들고 디렉토리 경로까지 콘솔창으로 이동<br>3.firebase init<br>4.Are you ready to proceed? (Y/n) -&gt;  y라고 입력<br>5.Which Firebase CLI features do you want to setup for this folder?<br><br>Press Space to select features, then Enter to confirm your choices.<br>6.()Hosting: Configure and deploy Firebase Hosting sites 로 커서이동후 스페이스로 선택후 엔터<br>7.What do you want to use as your public directory? public<br>8.Configure as a single-page app (rewrite all urls to /index.html)? (y/N) -&gt; y 입력<br>9.현재 디렉토리 경로에서 firebase serve 라고 입력하면 서버가 구동<br>10.웹 브라우저에서 <a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a> 이라고 입력하면 hosting 화면이 나온다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SPA-Single-Page-Application-란&quot;&gt;&lt;a href=&quot;#SPA-Single-Page-Application-란&quot; class=&quot;headerlink&quot; title=&quot;SPA(Single Page Application)란?&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="web" scheme="https://jinhyunly.github.io/categories/web/"/>
    
      <category term="mobile" scheme="https://jinhyunly.github.io/categories/web/mobile/"/>
    
      <category term="firebase" scheme="https://jinhyunly.github.io/categories/web/mobile/firebase/"/>
    
    
      <category term="web" scheme="https://jinhyunly.github.io/tags/web/"/>
    
      <category term="mobile" scheme="https://jinhyunly.github.io/tags/mobile/"/>
    
      <category term="firebase" scheme="https://jinhyunly.github.io/tags/firebase/"/>
    
  </entry>
  
  <entry>
    <title>nodeJs_basicSetting</title>
    <link href="https://jinhyunly.github.io/2018/02/10/nodeJs-basicSetting/"/>
    <id>https://jinhyunly.github.io/2018/02/10/nodeJs-basicSetting/</id>
    <published>2018-02-10T04:36:13.000Z</published>
    <updated>2018-02-10T04:57:18.111Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NodeJs란"><a href="#NodeJs란" class="headerlink" title="NodeJs란"></a>NodeJs란</h3><hr><blockquote><p>Javascript 엔진으로 빌드된 Javascript 런타임이다.</p></blockquote><h3 id="npm이란"><a href="#npm이란" class="headerlink" title="npm이란"></a>npm이란</h3><hr><blockquote><p>Node Package Modules의 약자이다<br>Node.js에서 사용가능한 모듈들을 패키지화시켜 모아놓은 것이다<br><br>npm&lt;명령어&gt;<br>npm help : 메인 설명<br>npm &lt;명령어&gt; -h : 명령어에 대한 설명<br>npm list 또는 npm ls : npm에서 관리되는 모듈 리스트<br>npm view &lt;패키지명&gt; : 모듈의 버전별 상세정보<br>npm install &lt;패키지명&gt; : 모듈을 찾아서 설치<br>npm list installed : 설치되어 있는 모듈의 목록을 봄<br>npm update &lt;패키지명&gt; : 설치된 패키지를 최신버전으로 업데이트</p></blockquote><h3 id="express란"><a href="#express란" class="headerlink" title="express란"></a>express란</h3><blockquote><p>Nodejs 확장 모듈로서 서버사이드 웹프레임워크이다.<br>view engine으로는 총 5가지를 지원한다.<br>-Haml<br>-Jade<br>-EJS<br>-CoffeKup<br>-jQuery Templates</p></blockquote><h3 id="node-설치와-기본적으로-필요한-모듈을-다운받자"><a href="#node-설치와-기본적으로-필요한-모듈을-다운받자" class="headerlink" title="node 설치와 기본적으로 필요한 모듈을 다운받자"></a>node 설치와 기본적으로 필요한 모듈을 다운받자</h3><blockquote><p><b>packge.json</b><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;nodeserver&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;nodeserver test&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;body-parser&quot;: &quot;^1.18.2&quot;,</span><br><span class="line">    &quot;ejs&quot;: &quot;^2.5.7&quot;,</span><br><span class="line">    &quot;express&quot;: &quot;^4.16.2&quot;,</span><br><span class="line">    &quot;mysql&quot;: &quot;^2.15.0&quot;,</span><br><span class="line">    &quot;nodemon&quot;: &quot;^1.14.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;connect-flash&quot;: &quot;^0.1.1&quot;,</span><br><span class="line">    &quot;express-session&quot;: &quot;^1.15.6&quot;,</span><br><span class="line">    &quot;passport&quot;: &quot;^0.4.0&quot;,</span><br><span class="line">    &quot;passport-local&quot;: &quot;^1.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="기본적인-app-js-gt-서버구동"><a href="#기본적인-app-js-gt-서버구동" class="headerlink" title="기본적인 app.js    -&gt;   서버구동"></a>기본적인 app.js    -&gt;   서버구동</h3><blockquote><p><b>app.js</b><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;)</span><br><span class="line">var app = express()</span><br><span class="line">var router = require(&apos;./router/index&apos;)</span><br><span class="line">var passport = require(&apos;passport&apos;)</span><br><span class="line">var LocalStrategy = require(&apos;passport-local&apos;).Strategy</span><br><span class="line">var session = require(&apos;express-session&apos;)</span><br><span class="line">var flash = require(&apos;connect-flash&apos;) //메세지를 쉽게 전달함</span><br><span class="line"></span><br><span class="line">app.listen(3000, function()&#123; //비동기로 동작</span><br><span class="line">  console.log(&quot;start! express server on port 3000!&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//미들웨어 정의</span><br><span class="line">app.use(express.static(&apos;public&apos;)) //express static함수에 public이라는 디렉토리를 등록</span><br><span class="line">app.use(bodyParser.json()) // request body 에 오는 데이터를 json형식으로 변환</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;extended:true&#125;))</span><br><span class="line">// extended: true  -&gt; url인코딩이 계속적용될지 1번만 적용할지 묻는것</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;)</span><br><span class="line"></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  secret: &apos;keyboard cat&apos;,</span><br><span class="line">  resave: false,</span><br><span class="line">  saveUninitialized: true</span><br><span class="line">&#125;))</span><br><span class="line">app.use(passport.initialize())</span><br><span class="line">app.use(passport.session())</span><br><span class="line">app.use(flash())</span><br><span class="line"></span><br><span class="line">app.use(router)</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;NodeJs란&quot;&gt;&lt;a href=&quot;#NodeJs란&quot; class=&quot;headerlink&quot; title=&quot;NodeJs란&quot;&gt;&lt;/a&gt;NodeJs란&lt;/h3&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Javascript 엔진으로 빌드된 Javascript 런
      
    
    </summary>
    
      <category term="nodeJs" scheme="https://jinhyunly.github.io/categories/nodeJs/"/>
    
    
      <category term="nodeJs" scheme="https://jinhyunly.github.io/tags/nodeJs/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB_install</title>
    <link href="https://jinhyunly.github.io/2018/02/08/mongoDB-install/"/>
    <id>https://jinhyunly.github.io/2018/02/08/mongoDB-install/</id>
    <published>2018-02-08T13:04:22.000Z</published>
    <updated>2018-02-08T13:32:21.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="window에-mongodb설치하기"><a href="#window에-mongodb설치하기" class="headerlink" title="window에 mongodb설치하기"></a>window에 mongodb설치하기</h1><ol><li><p><a href="https://www.mongodb.com/download-center?jmp=homepage#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center?jmp=homepage#community</a> 접속</p><blockquote><p>Community Server 후 windows 환경에서 download 클릭</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/1.mongo.jpg" alt="Alt text" title="image1">                </div>                <div class="image-caption">image1</div>            </figure></blockquote></li><li><p>next 쭉 눌러준다</p></li><li><p>기본으로 C:\ProgramFiles\MongoDB 로 설치된다</p></li><li><p>환경변수 path 경로에 새로만들기를 누르고  C:\ProgramFiles\MongoDB\Server\3.6\bin 로 잡아준다</p></li><li><p>C:\data\db 파일을 만들어준다</p></li><li><p>cmd에서<br>접근통제 없이 MongoDB를 시작한다</p><ul><li>mongod –port 27017 –dbpath /data/db<br>인스턴스에 연결</li><li>mongo –port 27017<br>액세스 제어로 MongoDB 인스턴스를 다시 시작</li><li>mongod –auth –port 27017 –dbpath /data/db</li></ul></li><li><p>cmd 창을 2개 키고  첫 cmd 창은 mongod를 입력하고 그대로 서버를 켜준다</p></li><li><p>나머지 1개의 창에는 mogod를 입력하고 시작한다. (접속)</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;window에-mongodb설치하기&quot;&gt;&lt;a href=&quot;#window에-mongodb설치하기&quot; class=&quot;headerlink&quot; title=&quot;window에 mongodb설치하기&quot;&gt;&lt;/a&gt;window에 mongodb설치하기&lt;/h1&gt;&lt;ol&gt;

      
    
    </summary>
    
      <category term="database" scheme="https://jinhyunly.github.io/categories/database/"/>
    
      <category term="mongoDB" scheme="https://jinhyunly.github.io/categories/database/mongoDB/"/>
    
    
      <category term="database" scheme="https://jinhyunly.github.io/tags/database/"/>
    
      <category term="mongoDB" scheme="https://jinhyunly.github.io/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>SpringFramework</title>
    <link href="https://jinhyunly.github.io/2018/02/08/springFramework/"/>
    <id>https://jinhyunly.github.io/2018/02/08/springFramework/</id>
    <published>2018-02-08T12:29:23.000Z</published>
    <updated>2018-02-08T13:00:41.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-framework"><a href="#Spring-framework" class="headerlink" title="Spring framework"></a>Spring framework</h3><hr><blockquote><p>프레임워크란, 특정한 목적에 맞게 프로그램이을 쉽게 하기 위한 약속입니다.<br><br>자바 언어를 기반으로 다양한 어플리케이션을 제작하기 위한 약속된 프로그래밍 틀 이다.<br><br>스프링의 경우 톰캣을 이용할수 있다. (접근하기 쉽다)</p><ul><li>eclipse  / help / market place 에서 STS 검색후 install</li></ul></blockquote><h3 id="DI-Dependency-Injection-의존성-주입-와-IOC-컨테이너-Spring"><a href="#DI-Dependency-Injection-의존성-주입-와-IOC-컨테이너-Spring" class="headerlink" title="DI(Dependency Injection 의존성 주입) 와 IOC 컨테이너(Spring)"></a>DI(Dependency Injection 의존성 주입) 와 IOC 컨테이너(Spring)</h3><hr><blockquote><p>스프링이란 부품을 생성하고 조립하는 라이브러리 집합체라고 할 수 있다.</p><ul><li><p>AOP(Aspect Oriented Programming)<br>공통기능을 모든 모듈에 적용하기 위한 방법으로 상속을 통한 방법이 있다.<br>상속도 좋은 방법이지만 java에서 다중상속이 불가하므로 AOP방법으로 한다.<br>-공통기능을 분리시켜놓고 공통기능을 필요로 하는 핵심기능들에서 사용하는방식(공통기능을 재활용하는 방식)<br></p></li><li><p>AOP용어<br>-Aspect: 공통기능</p></li><li><ul><li>Advice: Aspect의 기능자체<br>-Joinpoint: Advice를 적용해야 되는 부분(ex 필드, 메소드) (스프링에서는 메소드만 해당)<br>-Pointcut: Joinpoint의 부분으로 실제로 Advice가 적용된 부분<br>-Weaving: Advice를 핵심 기능에 적용 하는 행위</li></ul></li></ul></blockquote><h3 id="스프링에서-AOP-구현-방법-proxy를-이용한다"><a href="#스프링에서-AOP-구현-방법-proxy를-이용한다" class="headerlink" title="스프링에서 AOP 구현 방법: proxy를 이용한다"></a>스프링에서 AOP 구현 방법: proxy를 이용한다</h3><blockquote><p>스프링에서 AOP 구현 방식 : XML스키마 기반으로 구현,  @Aspect 어노테이션 기반으로 구현<br><br>Advice 종류</p><ul><li><aop:before> : 메소드 실행전에 advice 실행<br><aop:after_returning> : 정상적으로 메소드 실행 후에 advice 실행<br><aop:throwing> : 메소드실행중 exception 발생시 advice  실행<br><aop:after> : 메소드 실행중 exception 이 발생하여도 advice 실행</aop:after></aop:throwing></aop:after_returning></aop:before></li><li><aop:around> : 메서드 실행 전/후 및 exception 발생 시 advice 실행</aop:around></li></ul></blockquote><h3 id="AspectJ-Pointcut-표현식"><a href="#AspectJ-Pointcut-표현식" class="headerlink" title="AspectJ Pointcut 표현식"></a>AspectJ Pointcut 표현식</h3><blockquote><p>pointcut을 지정할 때 사용하는 표현식으로 AspectJ 문법을 사용</p><p>* : 모든<br>. : 현재<br>.. : 0개 이상</p></blockquote><h3 id="스프링-MVC-개요"><a href="#스프링-MVC-개요" class="headerlink" title="스프링 MVC 개요"></a>스프링 MVC 개요</h3><blockquote><p>Spring이 웹 프레임워크로서 우수성이 인정되었기 때문에 유명해졌다<br><br>@Validator를 이용한 검증<br><br>폼에서 전달되는 데이터를 컴맨드 객체에 담아 컨트롤 객체에 전달한다.<br>이때 커멘드 객체의 유효성을 검사 할 수 있다.<br>참고로 javascript를 이용하는 것은 클라이언트에서 검사하는 방법이고<br>지금 하는 Validator 인터페이스를 이용하는 방법은 서버에서 검사하는 방법이다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring-framework&quot;&gt;&lt;a href=&quot;#Spring-framework&quot; class=&quot;headerlink&quot; title=&quot;Spring framework&quot;&gt;&lt;/a&gt;Spring framework&lt;/h3&gt;&lt;hr&gt;
&lt;blockquote&gt;
      
    
    </summary>
    
      <category term="web" scheme="https://jinhyunly.github.io/categories/web/"/>
    
      <category term="spring" scheme="https://jinhyunly.github.io/categories/web/spring/"/>
    
    
      <category term="web" scheme="https://jinhyunly.github.io/tags/web/"/>
    
      <category term="spring" scheme="https://jinhyunly.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>image load</title>
    <link href="https://jinhyunly.github.io/2018/02/08/first-post/"/>
    <id>https://jinhyunly.github.io/2018/02/08/first-post/</id>
    <published>2018-02-08T09:06:38.000Z</published>
    <updated>2018-02-08T12:38:21.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MarkDown-형식으로-이미지-올리는법"><a href="#MarkDown-형식으로-이미지-올리는법" class="headerlink" title="MarkDown 형식으로 이미지 올리는법"></a>MarkDown 형식으로 이미지 올리는법</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/avatar.jpg" alt="Alt text" title="image">                </div>                <div class="image-caption">image</div>            </figure><figure class="highlight plain"><figcaption><span>how can I image load</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](/imageFolder_Name/imageFile_Name.jpg &quot;avatar&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MarkDown-형식으로-이미지-올리는법&quot;&gt;&lt;a href=&quot;#MarkDown-형식으로-이미지-올리는법&quot; class=&quot;headerlink&quot; title=&quot;MarkDown 형식으로 이미지 올리는법&quot;&gt;&lt;/a&gt;MarkDown 형식으로 이미지 올리
      
    
    </summary>
    
    
      <category term="test" scheme="https://jinhyunly.github.io/tags/test/"/>
    
  </entry>
  
</feed>
