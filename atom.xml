<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jinhyunly page</title>
  
  <subtitle>Computer Scientist</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jinhyunly.github.io/"/>
  <updated>2018-03-10T20:16:25.696Z</updated>
  <id>https://jinhyunly.github.io/</id>
  
  <author>
    <name>jinhyun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTML_Introduction</title>
    <link href="https://jinhyunly.github.io/2018/03/11/HTML-Introduction/"/>
    <id>https://jinhyunly.github.io/2018/03/11/HTML-Introduction/</id>
    <published>2018-03-10T19:46:58.000Z</published>
    <updated>2018-03-10T20:16:25.696Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><blockquote><p>HTML은 웹페이지를 기술하기 위한 마크업 언어이다.<br>조금 더 자세히 말하면 웹페이지의 내용(content)과 구조(structure)을 담당하는 언어로써<br>HTML 태그를 통해 정보를 구조화 하는 것이다.</p></blockquote><h3 id="시멘틱-태그-Semeantics"><a href="#시멘틱-태그-Semeantics" class="headerlink" title="시멘틱 태그(Semeantics)"></a>시멘틱 태그(Semeantics)</h3><blockquote><p>HTML 요소의 의미를 명확히 설명하는 시맨틱 태그를 도입하여 브라우저, 검색엔진, 개발자<br>모두에게 콘텐츠의 의미를 명확히 설명할수 있다. 이를 통해 HTML 요소의 의미를 명확히 해석하고<br>그 데이터를 활용할 수 있는 시멘틱 웹을 실현할 수 있다.</p></blockquote><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><blockquote><p>head태그 사이에는 document title, 외부파일 참조, metadata의 설정 등이<br>위치하며 이 정보들은 브라우저에 표시되지 않는다.</p></blockquote><h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><blockquote><p>웹브라우저에 출력되는 모든 요소는 body태그 사이에 위치한다.</p></blockquote><h3 id="tip"><a href="#tip" class="headerlink" title="tip)"></a>tip)</h3><blockquote><p>HTML document는 .html 확장자를 갖는 순수한 텍스트 파일이다. 따라서<br>메모장 등으로도 편집할수 있으나 다양한 편의 기능을 제공하는 editor 또는<br>IDE(Integrated Development Environment)를 사용하는 것이 일반적이다.<br>대표적인 editor 또는 IDE는 vsCode(Visual Studio Code), WebStorm, Atom, Sublime text등이 있다.</p></blockquote><h3 id="HTML-요소-Element"><a href="#HTML-요소-Element" class="headerlink" title="HTML 요소(Element)"></a>HTML 요소(Element)</h3><blockquote><p>시작태그와 종료태그 그리고 태그 사이에 위치한 content로 구성된다<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt; Hello &lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>태그는 대소문자를 구별하지 않으나 w3c 에서 소문자를 추천하고 있으므로 소문자로 한다</p></blockquote><h3 id="요소의-중첩"><a href="#요소의-중첩" class="headerlink" title="요소의 중첩"></a>요소의 중첩</h3><blockquote><p>태그안의 태그<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;안녕&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;반갑&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p><p>body요소는 h1, p요소를 포함한다. 이 중첩 관계(부자관계)로 웹페이지의 구조를 표현한다.</p></blockquote><h3 id="빈-요소-Empty-Element"><a href="#빈-요소-Empty-Element" class="headerlink" title="빈 요소(Empty Element)"></a>빈 요소(Empty Element)</h3><blockquote><p>content를 가질수 없는 요소를 빈 요소라 한다. content가 없으며 attribute만을 가질수 있다.<br><br>빈요소중 대표적인 요소는 br, hr, img, input, link, meta 등이 있다.</p></blockquote><h3 id="어트리뷰트-attribute"><a href="#어트리뷰트-attribute" class="headerlink" title="어트리뷰트(attribute)"></a>어트리뷰트(attribute)</h3><blockquote><p>어트리뷰트란 요소의 성질, 특징을 정의하는 명세이다. 어트리뷰트를 가질수 있으며 어트리뷰트는<br>요소에 추가적 정보(예를 들어 이미지 파일의 경로, 크기 등)를 제공한다. 어트리뷰트는 시작태그에<br>위치해야 하며 이름과 값의 쌍을 이룬다. (e.g name=”value”)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;html.png&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>src가 Attribute Name이 되고 “”값이 Attribute Value 가 된다</p></blockquote><h3 id="글로벌-어트리뷰트-HTML-Global-Attribute"><a href="#글로벌-어트리뷰트-HTML-Global-Attribute" class="headerlink" title="글로벌 어트리뷰트(HTML Global Attribute)"></a>글로벌 어트리뷰트(HTML Global Attribute)</h3><blockquote><p>글로벌 어트리뷰트는 모든 HTML 요소가 공통으로 사용할 수 있는 어트리 뷰트다.<br>몇몇 요소에는 효과가 적용 되지 않을 수 있지만, 글로벌 어트리뷰트는 대체로<br>모든 요소에 사용될 수 있다.<br><br><br>대표적인 글로벌 어트리뷰트는<br><br></p><ul><li>id :유일한 식별자(id)를 요소에 지정한다. 중복 지정이 불가하다.</li><li>class :스타일시트에 정의된 class를 요소에 지정한다. 중복 지정이 가능하다.</li><li>hidden :css의 hidden과는 다르게 의미상으로도 브라우저에 노출되지 않게 된다.</li><li>lang :지정된 요소의 언어를 지정한다. 검색엔진의 크롤링 시 웹페이지의 언어를 인식할 수 있게 한다.</li><li>style :요소에 인라인 스타일을 지정한다.</li><li>tabindex :사용자가 키보드로 페이지를 내비게이션 시 이동 순서를 지정한다.</li><li>title : 요소에 관한 제목을 지정한다.</li></ul></blockquote><h3 id="주석-Comments"><a href="#주석-Comments" class="headerlink" title="주석(Comments)"></a>주석(Comments)</h3><blockquote><p>주석은 주로 개발자에게 코드를 설명하기 위해 사용되며 브라우저는 주석을 화면에 표시하지 않는다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;HTML은 웹페이지를 기술하기 위한 마크업 언어이다.&lt;br&gt;조금 더 자세히 말하면 웹페이
      
    
    </summary>
    
      <category term="web" scheme="https://jinhyunly.github.io/categories/web/"/>
    
      <category term="HTML" scheme="https://jinhyunly.github.io/categories/web/HTML/"/>
    
    
      <category term="web" scheme="https://jinhyunly.github.io/tags/web/"/>
    
      <category term="HTML" scheme="https://jinhyunly.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>git_tutorial</title>
    <link href="https://jinhyunly.github.io/2018/02/21/git-tutorial/"/>
    <id>https://jinhyunly.github.io/2018/02/21/git-tutorial/</id>
    <published>2018-02-20T19:14:22.000Z</published>
    <updated>2018-02-20T19:17:20.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-초간단-설명서"><a href="#git-초간단-설명서" class="headerlink" title="git 초간단 설명서"></a>git 초간단 설명서</h1><blockquote><p>git init<br>새로운 저장소 만들기<br><br>git add .<br>변경된 파일 전체 추가<br><br>git status -&gt; new file들이 생성된것을 볼수있다<br><br>git commit -m “설명”<br>변경 내용 확정<br><br>git remote add origin “주소”<br>원격 서버에 연결하기<br><br>git push -u origin master<br>원격 서버로 올리기</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-초간단-설명서&quot;&gt;&lt;a href=&quot;#git-초간단-설명서&quot; class=&quot;headerlink&quot; title=&quot;git 초간단 설명서&quot;&gt;&lt;/a&gt;git 초간단 설명서&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;git init&lt;br&gt;새로운 저장소 만
      
    
    </summary>
    
      <category term="git" scheme="https://jinhyunly.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://jinhyunly.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>nodeJs_restAPI</title>
    <link href="https://jinhyunly.github.io/2018/02/17/nodeJs-restAPI/"/>
    <id>https://jinhyunly.github.io/2018/02/17/nodeJs-restAPI/</id>
    <published>2018-02-16T16:03:20.000Z</published>
    <updated>2018-02-16T16:21:52.187Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-의존-모듈-추가"><a href="#1-의존-모듈-추가" class="headerlink" title="1. 의존 모듈 추가"></a>1. 의존 모듈 추가</h3><blockquote><p>body-parser   -&gt; post 데이터 처리<br>express-session  -&gt; 세션관리<br><br>express-session 모듈이 직접 쿠키에 접근하므로 cookie-parser를 더이상 사용할 필요가 없다.<br><br>추가적으로 node.js 에 내장되어있는 fs모듈이 있는데 이는 나중에 파일을 열기 위함이다.<br><br>router 코드를 아래로 내려주는데 bodyParser 설정 아래 부분에 있다면 제대로 작동하지 않는다.<br>그리고  router에서 fs모듈을 사용할 수있도록 인자로 추가해준다.</p></blockquote><h3 id="2-session-부분"><a href="#2-session-부분" class="headerlink" title="2. session 부분"></a>2. session 부분</h3><blockquote><ul><li>secret : 쿠키를 임의로 변조하는 것을 방지하기 위한 sign 값이다. 원하는 값을 넣으면된다</li><li>resave : 세션을 언제나 저장할지(변경하지 않아도) 저장하는 값입니다.  express-session documentation에서는 이값을 false 로 하는 것을 권장하고 필요에 따라 true로 설정</li><li>saveUninitialized : uninitialized 세션이란 새로 생겼지만 변경되지 않은 세션을 의미한다. Documentation 에서 이값을 true로 설정하는 것을 권장한다.</li></ul></blockquote><h3 id="3-ejs-에서는-두가지만-알면된다"><a href="#3-ejs-에서는-두가지만-알면된다" class="headerlink" title="3. ejs 에서는 두가지만 알면된다"></a>3. ejs 에서는 두가지만 알면된다</h3><blockquote><ol><li>&lt;% 자바스크립트 코드%&gt;</li><li>&lt;%= 출력할 자바스크립트 객체%&gt;   -&gt; 자바스크립트 객체를 router에서 받아올수있다.</li></ol></blockquote><h3 id="4-ejs-분할하기"><a href="#4-ejs-분할하기" class="headerlink" title="4. ejs 분할하기"></a>4. ejs 분할하기</h3><blockquote><p>php나 rails에서 처럼, ejs에서도 코드를 여러파일로 분리하고 불러와서 사용할수있다.<br><br><br>&lt;% include FILENAME %&gt;</p></blockquote><h3 id="5-RESTful-API"><a href="#5-RESTful-API" class="headerlink" title="5. RESTful API"></a>5. RESTful API</h3><blockquote><p>REST는 Representational State Transfer 의 약자로서, 월드와이드 웹(www)와 같은<br>하이퍼미디어 시스템을 위한 소프트웨어 아키텍쳐 중 하나의 형식이다. REST서버는 클라이언트로 하여금 HTTP 프로토콜을<br>사용해 서버의 정보에 접근 및 변경을 가능케 합니다. 여기서 정보는 text, xml, json등 형식을 제공되는데 트렌드는  json이다<br><br></p><p><http 메소드=""><br>REST 기반 아키텍쳐에서 자주 사용되는 4가지 메소드는 다음과 같다</http></p><ol><li>GET - 조회</li><li>PUT - 생성 및 업데이트</li><li>DELETE - 제거</li><li>POST - 생성<br><br><br>POST와 PUT이 헷갈린다면 아래 링크 참조<br><a href="https://1ambda.github.io/javascripts/rest-api-put-vs-post/" target="_blank" rel="noopener">https://1ambda.github.io/javascripts/rest-api-put-vs-post/</a><br><br><br>API:GET/list<br>모든 유저 리스트를 출력하는 GET API를 작성한다.<br>우선, user.json 파일을 읽어야 하므로 , fs 모듈을 사용한다.<br><br><br>API:GET/getUser/:username<br>특정 유저 username의 디테일한 정보를 가져오는 GET API를 작성한다.<br><br><br>API:POST/addUser/:username<br>POST 메소드를 사용한다.<br><br><br>API:PUT/updateUser/:username<br>body:{“password”:”<strong><em>“, “name”: “</em></strong>“}<br>사용자 정보를 업데이트하는 API 이고, PUT 메소드를 사용<br>PUT API 는 indempotent해야 한다, 쉽게 말해서 요청을 몇번 수행하더라도, 같은 결과를 보장해야한다.<br><br><br>API:DELETE/deleteUser/:username<br>유저를 데이터에서 삭제하는 API이다. DELETE 메소드 사용</li></ol></blockquote><h3 id="6-restAPI-source"><a href="#6-restAPI-source" class="headerlink" title="6. restAPI source"></a>6. restAPI source</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(app, fs)</span><br><span class="line">&#123;</span><br><span class="line"> app.get(&apos;/&apos;,function(req,res)&#123;</span><br><span class="line">   var sess = req.session;</span><br><span class="line"></span><br><span class="line">     res.render(&apos;index&apos;, &#123;</span><br><span class="line">         title: &quot;MY HOMEPAGE&quot;,</span><br><span class="line">         length: 5,</span><br><span class="line">         name: sess.name,</span><br><span class="line">         username: sess.username</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> app.get(&apos;/list&apos;,function(req,res)&#123;</span><br><span class="line">   fs.readFile(__dirname + &quot;/../data/&quot;+&quot;user.json&quot;,&apos;utf8&apos;,function(err,data)&#123;</span><br><span class="line">     console.log(data);</span><br><span class="line">     res.end(data);</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> app.get(&apos;/getUser/:username&apos;, function(req,res)&#123;</span><br><span class="line">   fs.readFile(__dirname + &quot;/../data/user.json&quot;,&apos;utf8&apos;, function(err, data)&#123;</span><br><span class="line">     var users = JSON.parse(data)</span><br><span class="line">     res.json(users[req.params.username])</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> app.post(&apos;/addUser/:username&apos;, function(req,res)&#123;</span><br><span class="line">   var result = &#123; &#125;;</span><br><span class="line">   var username = req.params.username;</span><br><span class="line">   //CHECK REQ VALIDITY</span><br><span class="line">   if(!req.body[&quot;password&quot;] || !req.body[&quot;name&quot;])&#123;</span><br><span class="line">     result[&quot;success&quot;] = 0;</span><br><span class="line">     result[&quot;error&quot;] = &quot;invalid request&quot;;</span><br><span class="line">     res.json(result);</span><br><span class="line">     return;</span><br><span class="line">   &#125;</span><br><span class="line">   //LOAD DATA &amp; CHECK DUPLICATION</span><br><span class="line">   fs.readFile(__dirname+&quot;/../data/user.json&quot;,&apos;utf8&apos;, function(err, data)&#123;</span><br><span class="line">     var users = JSON.parse(data);</span><br><span class="line">     if(users[username])&#123;</span><br><span class="line">       //DUPLICATION FOUND</span><br><span class="line">       result[&quot;success&quot;] = 0;</span><br><span class="line">       result[&quot;error&quot;] = &quot;duplicate&quot;;</span><br><span class="line">       res.json(result);</span><br><span class="line">       return;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     //ADD TO data</span><br><span class="line">     users[username] = req.body;</span><br><span class="line"></span><br><span class="line">     //SAVE data</span><br><span class="line">     fs.writeFile(__dirname + &quot;/../data/user.json&quot;,</span><br><span class="line">                    JSON.stringify(users,null,&apos;\t&apos;),&quot;utf8&quot;, function(err, data)&#123;</span><br><span class="line">            result=&#123;&quot;success&quot;:1&#125;;</span><br><span class="line">            res.json(result);</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> app.put(&apos;/updateUser/:username&apos;, function(req,res)&#123;</span><br><span class="line">   var result = &#123; &#125;;</span><br><span class="line">   var username = req.params.username;</span><br><span class="line"></span><br><span class="line">   //CHECK REQ VALIDITY</span><br><span class="line">   if(!req.body[&quot;password&quot;] || !req.body[&quot;name&quot;])&#123;</span><br><span class="line">     result[&quot;success&quot;] = 0;</span><br><span class="line">     result[&quot;error&quot;] = &quot;invalid request&quot;;</span><br><span class="line">     res.json(result);</span><br><span class="line">     return;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   //LOAD data</span><br><span class="line">   fs.readFile(__dirname + &quot;/../data/user.json&quot;,&quot;utf8&quot;, function(err,data)&#123;</span><br><span class="line">     var users = JSON.parse(data);</span><br><span class="line">     //ADD/MODIFY data</span><br><span class="line">     users[username] = req.body;</span><br><span class="line"></span><br><span class="line">     //SAVE DATA</span><br><span class="line">     fs.writeFile(__dirname + &quot;/../data/user.json&quot;,</span><br><span class="line">                    JSON.stringify(users,null,&apos;\t&apos;), &quot;utf8&quot;, function(err,data)&#123;</span><br><span class="line">        result = &#123;&quot;success&quot;: 1&#125;;</span><br><span class="line">        res.json(result);</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> app.delete(&apos;/deleteUser/:username&apos;, function(req,res)&#123;</span><br><span class="line">   var result = &#123; &#125;;</span><br><span class="line">   //LOAD DATA</span><br><span class="line">   fs.readFile(__dirname + &quot;/../data/user.json&quot;, &quot;utf8&quot;, function(err,data)&#123;</span><br><span class="line">     var users = JSON.parse(data);</span><br><span class="line"></span><br><span class="line">     //IF NOT FOUND</span><br><span class="line">     if(!users[req.params.username])&#123;</span><br><span class="line">       result[&quot;success&quot;] = 0;</span><br><span class="line">       result[&quot;error&quot;] = &quot;not found&quot;;</span><br><span class="line">       res.json(result);</span><br><span class="line">       return;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     delete users[req.params.username];</span><br><span class="line">     fs.writeFile(__dirname + &quot;/../data/user.json&quot;,</span><br><span class="line">                  JSON.stringify(users,null,&apos;\t&apos;), &quot;utf8&quot;, function(err,data)&#123;</span><br><span class="line">        result[&quot;success&quot;] = 1;</span><br><span class="line">        res.json(result);</span><br><span class="line">        return;</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> app.get(&apos;/login/:username/:password&apos;, function(req,res)&#123;</span><br><span class="line">   var sess;</span><br><span class="line">   sess = req.session;</span><br><span class="line"></span><br><span class="line">   fs.readFile(__dirname + &quot;/../data/user.json&quot;,&quot;utf8&quot;, function(err, data)&#123;</span><br><span class="line">     var users = JSON.parse(data);</span><br><span class="line">     var username = req.params.username;</span><br><span class="line">     var password = req.params.password;</span><br><span class="line">     var result = &#123;&#125;;</span><br><span class="line">     if(!users[username])&#123;</span><br><span class="line">       //USERNAME NOT FOUND</span><br><span class="line">       result[&quot;success&quot;] = 0;</span><br><span class="line">       result[&quot;error&quot;] = &quot;not found&quot;;</span><br><span class="line">       res.json(result);</span><br><span class="line">       return;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     if(users[username][&quot;password&quot;] == password)&#123;</span><br><span class="line">       result[&quot;success&quot;] = 1;</span><br><span class="line">       sess.username = username;</span><br><span class="line">       sess.name = users[username][&quot;name&quot;];</span><br><span class="line">       res.json(result);</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">       result[&quot;success&quot;] = 0;</span><br><span class="line">       result[&quot;error&quot;] = &quot;incorrect&quot;;</span><br><span class="line">       res.json(result);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> app.get(&apos;/logout&apos;, function(req,res)&#123;</span><br><span class="line">   sess = req.session;</span><br><span class="line">   if(sess.username)&#123;</span><br><span class="line">     req.session.destroy(function(err)&#123;</span><br><span class="line">       if(err)&#123;</span><br><span class="line">         console.log(err);</span><br><span class="line">       &#125;else&#123;</span><br><span class="line">         res.redirect(&apos;/&apos;);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">     res.redirect(&apos;/&apos;)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-해당소스-및-참고사이트"><a href="#7-해당소스-및-참고사이트" class="headerlink" title="7. 해당소스 및 참고사이트"></a>7. 해당소스 및 참고사이트</h3><blockquote><p><a href="https://github.com/Jinhyunly/nodeJs_restAPI.git" target="_blank" rel="noopener">https://github.com/Jinhyunly/nodeJs_restAPI.git</a> (작성한 소스)<br><a href="https://velopert.com/332" target="_blank" rel="noopener">https://velopert.com/332</a> (참고사이트)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-의존-모듈-추가&quot;&gt;&lt;a href=&quot;#1-의존-모듈-추가&quot; class=&quot;headerlink&quot; title=&quot;1. 의존 모듈 추가&quot;&gt;&lt;/a&gt;1. 의존 모듈 추가&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;body-parser   -&amp;gt; pos
      
    
    </summary>
    
      <category term="nodeJs" scheme="https://jinhyunly.github.io/categories/nodeJs/"/>
    
      <category term="restAPI" scheme="https://jinhyunly.github.io/categories/nodeJs/restAPI/"/>
    
    
      <category term="nodeJs" scheme="https://jinhyunly.github.io/tags/nodeJs/"/>
    
      <category term="restAPI" scheme="https://jinhyunly.github.io/tags/restAPI/"/>
    
  </entry>
  
  <entry>
    <title>firebase</title>
    <link href="https://jinhyunly.github.io/2018/02/12/firebase/"/>
    <id>https://jinhyunly.github.io/2018/02/12/firebase/</id>
    <published>2018-02-12T02:49:51.000Z</published>
    <updated>2018-02-12T02:54:18.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SPA-Single-Page-Application-란"><a href="#SPA-Single-Page-Application-란" class="headerlink" title="SPA(Single Page Application)란?"></a>SPA(Single Page Application)란?</h3><blockquote><p>단일 페이지 웹 어플리케이션이며 첫 페이지 로딩 후 갱신 없이 모든 서비스가 한화면에서 이루어지는 웹 사이트를 일컫는다.</p></blockquote><h3 id="Firebase-설치"><a href="#Firebase-설치" class="headerlink" title="Firebase 설치"></a>Firebase 설치</h3><blockquote><p><a href="https://nodejs.org/ko/" target="_blank" rel="noopener">https://nodejs.org/ko/</a> <br><br>firebase 설치를 위한 nodejs 설치</p></blockquote><h3 id="Firebase-설치-환경설정"><a href="#Firebase-설치-환경설정" class="headerlink" title="Firebase 설치 환경설정"></a>Firebase 설치 환경설정</h3><blockquote><p>1.콘솔창을 키고 npm install firebase-tool -g 입력<br>2.memoWeb이라는 디렉토리를 만들고 디렉토리 경로까지 콘솔창으로 이동<br>3.firebase init<br>4.Are you ready to proceed? (Y/n) -&gt;  y라고 입력<br>5.Which Firebase CLI features do you want to setup for this folder?<br><br>Press Space to select features, then Enter to confirm your choices.<br>6.()Hosting: Configure and deploy Firebase Hosting sites 로 커서이동후 스페이스로 선택후 엔터<br>7.What do you want to use as your public directory? public<br>8.Configure as a single-page app (rewrite all urls to /index.html)? (y/N) -&gt; y 입력<br>9.현재 디렉토리 경로에서 firebase serve 라고 입력하면 서버가 구동<br>10.웹 브라우저에서 <a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a> 이라고 입력하면 hosting 화면이 나온다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SPA-Single-Page-Application-란&quot;&gt;&lt;a href=&quot;#SPA-Single-Page-Application-란&quot; class=&quot;headerlink&quot; title=&quot;SPA(Single Page Application)란?&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="web" scheme="https://jinhyunly.github.io/categories/web/"/>
    
      <category term="mobile" scheme="https://jinhyunly.github.io/categories/web/mobile/"/>
    
      <category term="firebase" scheme="https://jinhyunly.github.io/categories/web/mobile/firebase/"/>
    
    
      <category term="web" scheme="https://jinhyunly.github.io/tags/web/"/>
    
      <category term="mobile" scheme="https://jinhyunly.github.io/tags/mobile/"/>
    
      <category term="firebase" scheme="https://jinhyunly.github.io/tags/firebase/"/>
    
  </entry>
  
  <entry>
    <title>nodeJs_basicSetting</title>
    <link href="https://jinhyunly.github.io/2018/02/10/nodeJs-basicSetting/"/>
    <id>https://jinhyunly.github.io/2018/02/10/nodeJs-basicSetting/</id>
    <published>2018-02-10T04:36:13.000Z</published>
    <updated>2018-02-10T04:57:18.111Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NodeJs란"><a href="#NodeJs란" class="headerlink" title="NodeJs란"></a>NodeJs란</h3><hr><blockquote><p>Javascript 엔진으로 빌드된 Javascript 런타임이다.</p></blockquote><h3 id="npm이란"><a href="#npm이란" class="headerlink" title="npm이란"></a>npm이란</h3><hr><blockquote><p>Node Package Modules의 약자이다<br>Node.js에서 사용가능한 모듈들을 패키지화시켜 모아놓은 것이다<br><br>npm&lt;명령어&gt;<br>npm help : 메인 설명<br>npm &lt;명령어&gt; -h : 명령어에 대한 설명<br>npm list 또는 npm ls : npm에서 관리되는 모듈 리스트<br>npm view &lt;패키지명&gt; : 모듈의 버전별 상세정보<br>npm install &lt;패키지명&gt; : 모듈을 찾아서 설치<br>npm list installed : 설치되어 있는 모듈의 목록을 봄<br>npm update &lt;패키지명&gt; : 설치된 패키지를 최신버전으로 업데이트</p></blockquote><h3 id="express란"><a href="#express란" class="headerlink" title="express란"></a>express란</h3><blockquote><p>Nodejs 확장 모듈로서 서버사이드 웹프레임워크이다.<br>view engine으로는 총 5가지를 지원한다.<br>-Haml<br>-Jade<br>-EJS<br>-CoffeKup<br>-jQuery Templates</p></blockquote><h3 id="node-설치와-기본적으로-필요한-모듈을-다운받자"><a href="#node-설치와-기본적으로-필요한-모듈을-다운받자" class="headerlink" title="node 설치와 기본적으로 필요한 모듈을 다운받자"></a>node 설치와 기본적으로 필요한 모듈을 다운받자</h3><blockquote><p><b>packge.json</b><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;nodeserver&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;nodeserver test&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;body-parser&quot;: &quot;^1.18.2&quot;,</span><br><span class="line">    &quot;ejs&quot;: &quot;^2.5.7&quot;,</span><br><span class="line">    &quot;express&quot;: &quot;^4.16.2&quot;,</span><br><span class="line">    &quot;mysql&quot;: &quot;^2.15.0&quot;,</span><br><span class="line">    &quot;nodemon&quot;: &quot;^1.14.3&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;connect-flash&quot;: &quot;^0.1.1&quot;,</span><br><span class="line">    &quot;express-session&quot;: &quot;^1.15.6&quot;,</span><br><span class="line">    &quot;passport&quot;: &quot;^0.4.0&quot;,</span><br><span class="line">    &quot;passport-local&quot;: &quot;^1.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="기본적인-app-js-gt-서버구동"><a href="#기본적인-app-js-gt-서버구동" class="headerlink" title="기본적인 app.js    -&gt;   서버구동"></a>기본적인 app.js    -&gt;   서버구동</h3><blockquote><p><b>app.js</b><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;)</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;)</span><br><span class="line">var app = express()</span><br><span class="line">var router = require(&apos;./router/index&apos;)</span><br><span class="line">var passport = require(&apos;passport&apos;)</span><br><span class="line">var LocalStrategy = require(&apos;passport-local&apos;).Strategy</span><br><span class="line">var session = require(&apos;express-session&apos;)</span><br><span class="line">var flash = require(&apos;connect-flash&apos;) //메세지를 쉽게 전달함</span><br><span class="line"></span><br><span class="line">app.listen(3000, function()&#123; //비동기로 동작</span><br><span class="line">  console.log(&quot;start! express server on port 3000!&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//미들웨어 정의</span><br><span class="line">app.use(express.static(&apos;public&apos;)) //express static함수에 public이라는 디렉토리를 등록</span><br><span class="line">app.use(bodyParser.json()) // request body 에 오는 데이터를 json형식으로 변환</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;extended:true&#125;))</span><br><span class="line">// extended: true  -&gt; url인코딩이 계속적용될지 1번만 적용할지 묻는것</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;)</span><br><span class="line"></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  secret: &apos;keyboard cat&apos;,</span><br><span class="line">  resave: false,</span><br><span class="line">  saveUninitialized: true</span><br><span class="line">&#125;))</span><br><span class="line">app.use(passport.initialize())</span><br><span class="line">app.use(passport.session())</span><br><span class="line">app.use(flash())</span><br><span class="line"></span><br><span class="line">app.use(router)</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;NodeJs란&quot;&gt;&lt;a href=&quot;#NodeJs란&quot; class=&quot;headerlink&quot; title=&quot;NodeJs란&quot;&gt;&lt;/a&gt;NodeJs란&lt;/h3&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Javascript 엔진으로 빌드된 Javascript 런
      
    
    </summary>
    
      <category term="nodeJs" scheme="https://jinhyunly.github.io/categories/nodeJs/"/>
    
    
      <category term="nodeJs" scheme="https://jinhyunly.github.io/tags/nodeJs/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB_install</title>
    <link href="https://jinhyunly.github.io/2018/02/08/mongoDB-install/"/>
    <id>https://jinhyunly.github.io/2018/02/08/mongoDB-install/</id>
    <published>2018-02-08T13:04:22.000Z</published>
    <updated>2018-02-08T13:32:21.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="window에-mongodb설치하기"><a href="#window에-mongodb설치하기" class="headerlink" title="window에 mongodb설치하기"></a>window에 mongodb설치하기</h1><ol><li><p><a href="https://www.mongodb.com/download-center?jmp=homepage#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center?jmp=homepage#community</a> 접속</p><blockquote><p>Community Server 후 windows 환경에서 download 클릭</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/1.mongo.jpg" alt="Alt text" title="image1">                </div>                <div class="image-caption">image1</div>            </figure></blockquote></li><li><p>next 쭉 눌러준다</p></li><li><p>기본으로 C:\ProgramFiles\MongoDB 로 설치된다</p></li><li><p>환경변수 path 경로에 새로만들기를 누르고  C:\ProgramFiles\MongoDB\Server\3.6\bin 로 잡아준다</p></li><li><p>C:\data\db 파일을 만들어준다</p></li><li><p>cmd에서<br>접근통제 없이 MongoDB를 시작한다</p><ul><li>mongod –port 27017 –dbpath /data/db<br>인스턴스에 연결</li><li>mongo –port 27017<br>액세스 제어로 MongoDB 인스턴스를 다시 시작</li><li>mongod –auth –port 27017 –dbpath /data/db</li></ul></li><li><p>cmd 창을 2개 키고  첫 cmd 창은 mongod를 입력하고 그대로 서버를 켜준다</p></li><li><p>나머지 1개의 창에는 mogod를 입력하고 시작한다. (접속)</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;window에-mongodb설치하기&quot;&gt;&lt;a href=&quot;#window에-mongodb설치하기&quot; class=&quot;headerlink&quot; title=&quot;window에 mongodb설치하기&quot;&gt;&lt;/a&gt;window에 mongodb설치하기&lt;/h1&gt;&lt;ol&gt;

      
    
    </summary>
    
      <category term="database" scheme="https://jinhyunly.github.io/categories/database/"/>
    
      <category term="mongoDB" scheme="https://jinhyunly.github.io/categories/database/mongoDB/"/>
    
    
      <category term="database" scheme="https://jinhyunly.github.io/tags/database/"/>
    
      <category term="mongoDB" scheme="https://jinhyunly.github.io/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>SpringFramework</title>
    <link href="https://jinhyunly.github.io/2018/02/08/springFramework/"/>
    <id>https://jinhyunly.github.io/2018/02/08/springFramework/</id>
    <published>2018-02-08T12:29:23.000Z</published>
    <updated>2018-02-08T13:00:41.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-framework"><a href="#Spring-framework" class="headerlink" title="Spring framework"></a>Spring framework</h3><hr><blockquote><p>프레임워크란, 특정한 목적에 맞게 프로그램이을 쉽게 하기 위한 약속입니다.<br><br>자바 언어를 기반으로 다양한 어플리케이션을 제작하기 위한 약속된 프로그래밍 틀 이다.<br><br>스프링의 경우 톰캣을 이용할수 있다. (접근하기 쉽다)</p><ul><li>eclipse  / help / market place 에서 STS 검색후 install</li></ul></blockquote><h3 id="DI-Dependency-Injection-의존성-주입-와-IOC-컨테이너-Spring"><a href="#DI-Dependency-Injection-의존성-주입-와-IOC-컨테이너-Spring" class="headerlink" title="DI(Dependency Injection 의존성 주입) 와 IOC 컨테이너(Spring)"></a>DI(Dependency Injection 의존성 주입) 와 IOC 컨테이너(Spring)</h3><hr><blockquote><p>스프링이란 부품을 생성하고 조립하는 라이브러리 집합체라고 할 수 있다.</p><ul><li><p>AOP(Aspect Oriented Programming)<br>공통기능을 모든 모듈에 적용하기 위한 방법으로 상속을 통한 방법이 있다.<br>상속도 좋은 방법이지만 java에서 다중상속이 불가하므로 AOP방법으로 한다.<br>-공통기능을 분리시켜놓고 공통기능을 필요로 하는 핵심기능들에서 사용하는방식(공통기능을 재활용하는 방식)<br></p></li><li><p>AOP용어<br>-Aspect: 공통기능</p></li><li><ul><li>Advice: Aspect의 기능자체<br>-Joinpoint: Advice를 적용해야 되는 부분(ex 필드, 메소드) (스프링에서는 메소드만 해당)<br>-Pointcut: Joinpoint의 부분으로 실제로 Advice가 적용된 부분<br>-Weaving: Advice를 핵심 기능에 적용 하는 행위</li></ul></li></ul></blockquote><h3 id="스프링에서-AOP-구현-방법-proxy를-이용한다"><a href="#스프링에서-AOP-구현-방법-proxy를-이용한다" class="headerlink" title="스프링에서 AOP 구현 방법: proxy를 이용한다"></a>스프링에서 AOP 구현 방법: proxy를 이용한다</h3><blockquote><p>스프링에서 AOP 구현 방식 : XML스키마 기반으로 구현,  @Aspect 어노테이션 기반으로 구현<br><br>Advice 종류</p><ul><li><aop:before> : 메소드 실행전에 advice 실행<br><aop:after_returning> : 정상적으로 메소드 실행 후에 advice 실행<br><aop:throwing> : 메소드실행중 exception 발생시 advice  실행<br><aop:after> : 메소드 실행중 exception 이 발생하여도 advice 실행</aop:after></aop:throwing></aop:after_returning></aop:before></li><li><aop:around> : 메서드 실행 전/후 및 exception 발생 시 advice 실행</aop:around></li></ul></blockquote><h3 id="AspectJ-Pointcut-표현식"><a href="#AspectJ-Pointcut-표현식" class="headerlink" title="AspectJ Pointcut 표현식"></a>AspectJ Pointcut 표현식</h3><blockquote><p>pointcut을 지정할 때 사용하는 표현식으로 AspectJ 문법을 사용</p><p>* : 모든<br>. : 현재<br>.. : 0개 이상</p></blockquote><h3 id="스프링-MVC-개요"><a href="#스프링-MVC-개요" class="headerlink" title="스프링 MVC 개요"></a>스프링 MVC 개요</h3><blockquote><p>Spring이 웹 프레임워크로서 우수성이 인정되었기 때문에 유명해졌다<br><br>@Validator를 이용한 검증<br><br>폼에서 전달되는 데이터를 컴맨드 객체에 담아 컨트롤 객체에 전달한다.<br>이때 커멘드 객체의 유효성을 검사 할 수 있다.<br>참고로 javascript를 이용하는 것은 클라이언트에서 검사하는 방법이고<br>지금 하는 Validator 인터페이스를 이용하는 방법은 서버에서 검사하는 방법이다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring-framework&quot;&gt;&lt;a href=&quot;#Spring-framework&quot; class=&quot;headerlink&quot; title=&quot;Spring framework&quot;&gt;&lt;/a&gt;Spring framework&lt;/h3&gt;&lt;hr&gt;
&lt;blockquote&gt;
      
    
    </summary>
    
      <category term="web" scheme="https://jinhyunly.github.io/categories/web/"/>
    
      <category term="spring" scheme="https://jinhyunly.github.io/categories/web/spring/"/>
    
    
      <category term="web" scheme="https://jinhyunly.github.io/tags/web/"/>
    
      <category term="spring" scheme="https://jinhyunly.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>image load</title>
    <link href="https://jinhyunly.github.io/2018/02/08/first-post/"/>
    <id>https://jinhyunly.github.io/2018/02/08/first-post/</id>
    <published>2018-02-08T09:06:38.000Z</published>
    <updated>2018-02-08T12:38:21.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MarkDown-형식으로-이미지-올리는법"><a href="#MarkDown-형식으로-이미지-올리는법" class="headerlink" title="MarkDown 형식으로 이미지 올리는법"></a>MarkDown 형식으로 이미지 올리는법</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/avatar.jpg" alt="Alt text" title="image">                </div>                <div class="image-caption">image</div>            </figure><figure class="highlight plain"><figcaption><span>how can I image load</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](/imageFolder_Name/imageFile_Name.jpg &quot;avatar&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MarkDown-형식으로-이미지-올리는법&quot;&gt;&lt;a href=&quot;#MarkDown-형식으로-이미지-올리는법&quot; class=&quot;headerlink&quot; title=&quot;MarkDown 형식으로 이미지 올리는법&quot;&gt;&lt;/a&gt;MarkDown 형식으로 이미지 올리
      
    
    </summary>
    
    
      <category term="test" scheme="https://jinhyunly.github.io/tags/test/"/>
    
  </entry>
  
</feed>
